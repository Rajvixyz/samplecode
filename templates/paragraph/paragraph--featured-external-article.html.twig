{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set paragraph_image = {
  '#theme': 'image_style',
  '#style_name':  'child_pages_thumbnail',
  '#uri': paragraph.field_image1.entity.field_media_image.entity.uri[0].value,
  '#alt': paragraph.field_image1.entity.field_media_image[0].alt,
  '#attributes' : { class:'feature-item__image'},
} %}

{%
  set classes = [
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  'feature-item',
  'version--article',
  'version--external',
  paragraph.field_image1.entity.field_media_image.entity.uri[0].value ? 'has-image' : 'no-image',
]
%}

<a{{attributes.addClass(classes)}} href="{{ paragraph.field_embed_link.0.url }}">

  {% if paragraph.field_image1.entity.field_media_image.entity.uri[0].value is not null %}
    {{ paragraph_image }}
  {% endif %}

  <div class="feature-item__content">
    <h3>{{ paragraph.field_article_title.value }}</h3>
    <time class="article-time">{{ content.field_publication_date }}</time>
    <p>{{ paragraph.field_short_description.value }}</p>
  </div>
</a>

