<?php

/**
 * @file
 * Preprocess functions for tchc_theme.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Cache\CacheableMetadata;

/**
 * Prepares variables for the html.html.twig template.
 */
function tchc_theme_preprocess_html(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // If we're on the front page.
  if (!$variables['is_front']) {
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
    $alias = trim($alias, '/');

    if (!empty($alias)) {
      $name = str_replace('/', '-', $alias);
      $variables['attributes']['class'][] = 'page-' . $name;
      list($section,) = explode('/', $alias, 2);

      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
  }

  // Add cachability metadata.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  $theme_settings = \Drupal::config($theme_name . '.settings');
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
  // Union all theme setting variables to the html.html.twig template.
  $variables += $theme_settings->getOriginal();

  // Include theme dist path for rendering SVG sprite.
  $variables['dist_path'] = \Drupal::theme()->getActiveTheme()->getPath() . '/dist/';
}

/**
 * F-- page. alter.
 */
function tchc_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if (!empty($node)) {
    if ($node = Drupal::request()->attributes->get('node')) {
      $revision = Drupal::request()->attributes->get('node_revision');

      if (isset($revision)) {
        $node = node_revision_load($revision);
      }

      array_splice($suggestions, 1, 0, 'page__' . $node->getType());
    }

    // Template suggestion based on content type.
    $node = Drupal::routeMatch()->getParameter('node');

    if (is_object($node)) {
      $content_type = $node->bundle();
      $suggestions[] = 'page__' . $content_type;
    }

    $path_args = explode('/', trim(\Drupal::service('path.current')->getPath(), '/'));
    $http_error_suggestions = [
      'system.401' => 'page__401',
      'system.403' => 'page__403',
      'system.404' => 'page__404',
    ];
    $route_name = \Drupal::routeMatch()->getRouteName();

    if (isset($http_error_suggestions[$route_name])) {
      $suggestions[] = $http_error_suggestions[$route_name];
    }
  }

  $node = \Drupal::routeMatch()->getParameter('node');

  if (empty($node)) {
    $node = \Drupal::routeMatch()->getParameter('node_preview');
  }

  if (!empty($node)) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function tchc_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  if (isset($variables['view']->element['#view_id'])) {
    $suggestions[] = 'views_view__' . $variables['view']->element['#view_id'];
  }
}

/**
 * Block suggestions for custom block bundles.
 */
function tchc_theme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_responsive_image_formatter().
 */
function tchc_theme_preprocess_responsive_image_formatter(&$variables) {
  // Access image entity to set data attribute for intrinsic image width.
  $variables['responsive_image']['#attributes']['data-original-image-width'] = $variables['item']->width;
  $variables['responsive_image']['#attributes']['data-original-image-height'] = $variables['item']->height;
}

/**
 * Implements hook_preprocess_responsive_image().
 */
function tchc_theme_preprocess_responsive_image(&$variables) {
  // Set explicit image width from saved value in the data attribute.
  $variables['img_element']['#attributes']['width'] = $variables['img_element']['#attributes']['data-original-image-width'];
  $variables['img_element']['#attributes']['height'] = $variables['img_element']['#attributes']['data-original-image-height'];
}

function tchc_theme_preprocess_paragraph__event_widget_board_and_committee(&$variables) {
  $variables['content']['view_event_listing'] = [
    '#type' => 'view',
    '#name' => 'event_listing',
    '#display_id' => 'block_3',
    '#arguments' => [],
  ];
}


function tchc_theme_preprocess_paragraph__event_widget_component(&$variables) {
  //\Drupal::messenger()->addStatus(t('event widget'));

  $paragraph = $variables['elements']['#paragraph'];
  $args = [];
  $fields = ['field_event_category', 'field_event_delivery', 'field_program_name', 'field_program_type', 'field_audience'];
  foreach ($fields as $field) {
    $field_value = $paragraph->$field->getValue();
    foreach ($field_value as $value) {
      $args[] = $value['target_id'];
    }
  }

  /*
  if (is_object($view)) {
    $view->setArguments($args);
    $view->setDisplay('block_4');
    $view->preExecute();
    $view->execute();
    $content = $view->buildRenderable('block_4', $args);
    $variables['content']['view_listing'] = $content;
  }*/

  $variables['content']['view_event_listing'] = [
    '#type' => 'view',
    '#name' => 'event_listing',
    '#display_id' => 'block_4',
    '#arguments' => $args,
  ];
}

function tchc_theme_preprocess_node__alert(&$variables) {
  $node = $variables['node'];
  $variables['#attached']['library'][] =  'tchc_theme/ypAlerts';
  //is this in page or site wide?
  if ($node->get('field_site_wide')->value == '1') {
    $variables['#attached']['drupalSettings']['alert_cookie'] = "alert_" . $node->id() . "_" . $node->getChangedTime();
  } else {
    $pageNode = \Drupal::routeMatch()->getParameter('node');
    $variables['#attached']['drupalSettings']['alert_cookie'] = "alert_in_page_" . $node->id() . "_" . $pageNode->id() . "_" . $node->getChangedTime();
  }
  $variables['dismissible'] = $node->field_dismissible->value;
}

/**
 * Implements template_preprocess_breadcrumb().
 */
function tchc_theme_preprocess_breadcrumb(&$variables) {
  // Remove duplicate links from the breadcrumb trail.
  if (!empty($variables['breadcrumb'])) {

    if (count($variables['breadcrumb']) == 1) {
      // Lone page needs to have breadcrumbs removed.
      unset($variables['breadcrumb'][0]);
    }
    elseif ($variables['breadcrumb'][0]['text'] == 'Home' && count($variables['breadcrumb']) == 2) {
      // This page appears directly under Home, so remove breadcrumbs.
      unset($variables['breadcrumb'][0]);
      unset($variables['breadcrumb'][1]);
    }
    elseif ($variables['breadcrumb'][0]['text'] == 'Home') {
      // Remove "Home" breadcrumb, always.
      unset($variables['breadcrumb'][0]);
    }
    
    $prev_link = NULL;

    // Loop over each link.
    foreach ($variables['breadcrumb'] as $key => $current_link) {
      if (empty($key)) {
        continue;
      }

      // Look to see if there was a previous link. If there isn't then it means
      // it was removed from the array already.
      if (isset($variables['breadcrumb'][$key - 1])) {
        $prev_link = $variables['breadcrumb'][$key - 1];
      }

      // Only proceed if a previous link was found.
      if (!empty($prev_link)) {
        // Check if the previous link's title is the same as the current link's
        // title.
        if ($prev_link['text'] == $current_link['text']) {
          // Remove the current link.
          unset($variables['breadcrumb'][$key]);
        }
      }
    }
    $variables['#cache']['max-age'] = 0;
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function tchc_theme_theme_suggestions_container_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = 'container__' . $element['#name'];
    $suggestions[] = 'container__' . $element['#name'] . '__' . $element['#display_id'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }
}

